@import uk.gov.hmrc.advancevaluationrulings.models.application._

@this(
    header: PageHeader,
    footer: PageFooter,
    methodOneSnippet: MethodOneSnippet,
    methodTwoSnippet: MethodTwoSnippet,
    methodThreeSnippet: MethodThreeSnippet,
    methodFourSnippet: MethodFourSnippet,
    methodFiveSnippet: MethodFiveSnippet,
    methodSixSnippet: MethodSixSnippet,
    line: Line,
    attachmentLine: AttachmentLine
)

@(application: Application)(implicit messages: Messages)

<fo:page-sequence master-reference="main">

    @header()

    @footer()

    <fo:flow flow-name="xsl-region-body" font-size="11pt" text-align="left">

        <fo:block-container>

            <fo:block role="H2" id="goods-details" font-size="18pt" font-weight="bold" margin-bottom="0.5cm">
                @messages("pdf.goodsDetails")
            </fo:block>

            @{application.requestedMethod match {
                case one: MethodOne =>
                    methodOneSnippet(one)

                case two: MethodTwo =>
                    methodTwoSnippet(two)

                case three: MethodThree =>
                    methodThreeSnippet(three)

                case four: MethodFour =>
                    methodFourSnippet(four)

                case five: MethodFive =>
                    methodFiveSnippet(five)

                case six: MethodSix =>
                    methodSixSnippet(six)
            }}

            @line(messages("pdf.goodsDescription"), application.goodsDetails.goodsDescription)

            @application.goodsDetails.similarRulingMethodInfo.map { x =>
                @line(messages("pdf.methodRulingQuestion"), messages("pdf.yes"))

                @line(messages("pdf.methodRuling"), x)
            }.getOrElse {
                @line(messages("pdf.methodRulingQuestion"), messages("pdf.no"))
            }

            @application.goodsDetails.similarRulingGoodsInfo.map { x =>
                @line(messages("pdf.goodsRulingQuestion"), messages("pdf.yes"))

                @line(messages("pdf.goodsRuling"), x)
            }.getOrElse {
                @line(messages("pdf.goodsRulingQuestion"), messages("pdf.no"))
            }

            @application.goodsDetails.envisagedCommodityCode.map { x =>
                @line(messages("pdf.commodityCode"), x)
            }.getOrElse {
                @line(messages("pdf.commodityCode"), messages("pdf.notProvided"))
            }

            @application.goodsDetails.knownLegalProceedings.map { x =>
                @line(messages("pdf.knownLegalProceedings"), messages("pdf.yes"))

                @line(messages("pdf.knownLegalProceedingsDescription"), x)
            }.getOrElse {
                @line(messages("pdf.knownLegalProceedings"), messages("pdf.no"))
            }

            @application.goodsDetails.confidentialInformation.map { x =>
                @line(messages("pdf.confidentialInformation"), messages("pdf.yes"))

                @line(messages("pdf.confidentialInformationDescription"), x)
            }.getOrElse {
                @line(messages("pdf.confidentialInformation"), messages("pdf.no"))
            }
            @attachmentLine("pdf.attachments", application.attachments)

            <fo:block id="FinalElement">

            </fo:block>
        </fo:block-container>
    </fo:flow>

</fo:page-sequence>
